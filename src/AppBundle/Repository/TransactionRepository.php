<?php

namespace AppBundle\Repository;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends \Doctrine\ORM\EntityRepository {

    public function findBetweenDatesandService(\DateTime $from, \DateTime $to, \AppBundle\Entity\Service $service) {

        $qb = $this->createQueryBuilder('t');
        $qb
                ->where($qb->expr()->between('t.createdAt', ':date_from', ':date_to'))
                ->andWhere($qb->expr()->eq('t.service', $service->getId()))
                ->setParameter('date_from', $from)
                ->setParameter('date_to', $to)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getSumAmmountBetweenDatesAndService(\DateTime $from, \DateTime $to, \AppBundle\Entity\Service $service) {
        $qb = $this->createQueryBuilder('t');
        $qb
                ->select('SUM(t.ammount) as Credits')
                ->where($qb->expr()->between('t.createdAt', ':date_from', ':date_to'))
                ->andWhere($qb->expr()->eq('t.service', $service->getId()))
                ->setParameter('date_from', $from)
                ->setParameter('date_to', $to)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getTrasactionBalanceByDate(\DateTime $from, \DateTime $to) {

        $qb = $this->createQueryBuilder('t');
        $qb->select('t.notary, '
                        . 'SUM(if(t.transaction_type=2,t.ammount,0)) as credit, '
                        . 'SUM(if(t.transaction_type=1,t.ammount,0)) as debit,'
                        . 'SUM(if(t.transaction_type=2,t.ammount,0))-SUM(if(t.transaction_type=1,t.ammount,0)) as saldo')                
                ->leftJoin('t.notary', 'n')
                ->where($qb->expr()->between('t.createdAt', ':date_from', ':date_to'))
                ->setParameter('date_from', $from)
                ->setParameter('date_to', $to)
                ->groupBy('n.id')
        ;
        return $qb->getQuery()->getResult();
    }

}
